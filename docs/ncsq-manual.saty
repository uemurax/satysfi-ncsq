@require: stdjareport
@require: itemize
@require: easytable/easytable
@require: matrix/matrix
@require: bibyfi/bibyfi
@require: bibyfi/bibyfi-IEEETran
@import: bibliography

let-math \cell = ${c}
let-math \idx = ${i}
let-math \idx1 = ${j}
let-math \idx2 = ${k}
let-math \nat = ${m}
let-math \nat1 = ${n}
let-math \nat2 = ${p}
let-math \top = ${t}
let-math \bottom = ${b}
let-math \left = ${l}
let-math \right = ${r}
let-math \width = ${w}
let-math \height = ${h}
let-math \source = ${\sigma}
let-math \target = ${\tau}
let-math \var = ${x}
let-math \var1 = ${y}
let-math \var2 = ${z}
let-math \diff = ${d}
let-math \cstr idxs = ${\(\mathrm{A}_{#idxs}\)}
let-math \mtrx = ${A}
let-math \mtrx1 = ${B}
let-math \Id = ${I}
let-math \el = ${a}
let-math \el1 = ${b}
let-math \trans = ${T}
let-math \matrix mss = ${\sqbracket{\matrix-body!(mss)}}
let-math \active = ${\mathcal{A}}
let-math \working = ${\mathcal{W}}
let-math \dir = ${\zeta}
let-math \lgr = ${\lambda}
let-math \step-len = ${\alpha}
let-math \clitvl b e = ${\sqbracket{#b, #e}}
let-math \bind = ${\leftarrow}
let-math \orth = ${Q}
let-math \ut = ${R}
let-math \hsh = ${H}
let-math \hshr = ${\rho}
let-math \unit = ${\mathbf{e}}
let-math \diag = ${\mathrm{diag}}
let-math \perm = ${\Pi}
let-math \vec = ${u}

let bibyfi-theme = BiByFiIEEETran.theme (|
  name-shrink = false;
  et-al = false;
  journal-abbr = [];
|)

let-block ctx +centering it =
line-break true true ctx (inline-fil ++ read-inline ctx it ++ inline-fil)

let-inline ctx \centering it =
inline-fil ++ embed-block-breakable ctx (read-block ctx '<+centering{#it;}>)

in

document (|
  title = {NCSq Manual};
  author = {Taichi Uemura};
|) '<
  +chapter{Implementation}<
    +section{Notation}<
      +p{
        For a cell ${\cell}, we write ${\paren{\paren{\app{\left}{\cell}, \app{\bottom}{\cell}}, \paren{\app{\right}{\cell}, \app{\top}{\cell}}}} for the bounding rectangle of ${\cell}.
        Let ${\width = \right - \left} be the width and ${\height = \top - \bottom} the height.
      }
    >
    +section{Automatic stretching}<
      +p{
        WARNING: The following are NOT implemented yet.
      }
      +p{
        Given a matrix of cells ${\paren{\cell_{\idx\idx1}}_{1 \leq \idx \leq \nat, 1 \leq \idx1 \leq \nat1}}, we want to arrange them satisfying the following:
        \enumerate{
          * cells do not overlap each other\;
          * arrows are sufficiently long to match their labels.
        }
        To achieve this, we have to determine the boundary ${\paren{\bottom_{\idx}, \top_{\idx}}} of ${\idx}-th row and the boundary ${\paren{\left_{\idx1}, \right_{\idx1}}} of ${\idx1}-th column.
        These boundaries must satisfies the following:
        \enumerate{
          * if ${\cell_{\idx\idx1}} is an object, then ${\bottom_{\idx} \leq \app{\bottom}{\cell_{\idx\idx1}}}, ${\app{\top}{\cell_{\idx\idx1}} \leq \top_{\idx}}, ${\left_{\idx1} \leq \app{\left}{\cell_{\idx\idx1}}}, and ${\app{\right}{\cell_{\idx\idx1}} \leq \right_{\idx1}}\;
          * if ${\cell_{\idx\idx1}} is a horizontal arrow, then ${\bottom_{\idx} \leq \app{\bottom}{\cell_{\idx\idx1}}} and ${\app{\top}{\cell_{\idx\idx1}} \leq \top_{\idx}}\;
          * if ${\cell_{\idx\idx1}} is a vertical arrow, then ${\left_{\idx1} \leq \app{\left}{\cell_{\idx\idx1}}} and ${\app{\right}{\cell_{\idx\idx1}} \leq \right_{\idx1}}\;
          * if ${\cell_{\idx\idx1}} is a horizontal arrow with source ${\cell_{\idx\source}} and target ${\cell_{\idx\target}} (${1 \leq \source < \idx1 < \target \leq \nat1}), then
          \eqn(${
            \app{\width}{\cell_{\idx\idx1}} \leq \paren{\right_{\source} - \app{\right}{\cell_{\idx\source}}} + \paren{\app{\left}{\cell_{\idx\target}} - \left_{\target}} + \sum_{\source < \idx1' < \target}\width_{\idx\idx1'}
          });%
          * if ${\cell_{\idx\idx1}} is a vertical arrow with source ${\cell_{\source\idx1}} and target ${\cell_{\target\idx1}} (${1 \leq \source < \idx < \target \leq \nat}), then
          \eqn(${
            \app{\height}{\cell_{\idx\idx1}} \leq \paren{\app{\bottom}{\cell_{\source\idx1}} - \bottom_{\source}} + \paren{\top_{\target} - \app{\top}{\cell_{\target\idx1}}} + \sum_{\source < \idx' < \target}\height_{\idx'\idx1}
          });%
        }
        Observe that horizontal adjustment and vertical adjustment are independent of each other, so we may first determine the boundary ${\paren{\bottom_{\idx}, \top_{\idx}}} of ${\idx}-th row satisfying the following:
        \enumerate{
          * if ${\cell_{\idx\idx1}} is either an object or a horizontal arrow, then ${\bottom_{\idx} \leq \app{\bottom}{\cell_{\idx\idx1}}} and ${\app{\top}{\cell_{\idx\idx1}} \leq \top_{\idx}}\;
          * if ${\cell_{\idx\idx1}} is a vertical arrow with source ${\cell_{\source\idx1}} and target ${\cell_{\target\idx1}}, then
          \eqn(${
            \app{\height}{\cell_{\idx\idx1}} \leq \paren{\app{\bottom}{\cell_{\source\idx1}} - \bottom_{\source}} + \paren{\top_{\target} - \app{\top}{\cell_{\target\idx1}}} + \sum_{\source < \idx' < \target}\height_{\idx'\idx1}
          });%
        }
        and then determine the boundary ${\paren{\left_{\idx1}, \right_{\idx1}}} of ${\idx1}-th column satisfying the dual conditions.
        The first condition is immediately solved:
        \eqn(${
          \bottom_{\idx} \leq \min\setsep{\app{\bottom}{\cell_{\idx\idx1}}}{\text!{${\cell_{\idx\idx1}} is either an object or a horizontal arrow}}
        });%
        \eqn(${
          \top_{\idx} \geq \max\setsep{\app{\top}{\cell_{\idx\idx1}}}{\text!{${\cell_{\idx\idx1}} is either an object or a horizontal arrow}}
        });%
        Let ${\bottom_{\idx}^{\paren{1}}} and ${\top_{\idx}^{\paren{1}}} be the right sides of these inequalities respectively.
        Put ${\var1_{\idx} = \bottom_{\idx}^{\paren{1}} - \bottom_{\idx}} and ${\var_{\idx} = \top_{\idx} - \top_{\idx}^{\paren{1}}}.
        Then the second condition is equivalent to that, if ${\cell_{\idx\idx1}} is a vertical arrow with source ${\cell_{\source\idx1}} and target ${\cell_{\target\idx1}}, then
        \eqn?:({${\cstr{\idx\idx1}}})(${
          \diff_{\idx\idx1} \leq \var1_{\source} + \var_{\target} + \sum_{\source < \idx' < \target}\var_{\idx'} + \var1_{\idx'}
        });%
        where
        \eqn(${
          \diff_{\idx\idx1} = \app{\height}{\cell_{\idx\idx1}} - \paren{\paren{\app{\bottom}{\cell_{\source\idx1}} - \bottom_{\source}^{\paren{1}}} + \paren{\top_{\target}^{\paren{1}} - \app{\top}{\cell_{\target\idx1}}} + \sum_{\source < \idx' < \target}\height_{\idx'\idx1}^{\paren{1}}}
        });%
        is a constant.
        Therefore, the goal becomes to find ${\var_{1}, \var1_{1}, \cdots, \var_{\nat}, \var1_{\nat} \geq 0} satisfying ${\cstr{\idx\idx1}} for every vertical arrow ${\cell_{\idx\idx1}} with source ${\cell_{\source\idx1}} and target ${\cell_{\target\idx1}}.
        Note that ${\var_{1}} and ${\var1_{\nat}} never appear in any ${\cstr{\idx\idx1}}, so we can drop them by setting ${\var_{1} = \var1_{\nat} = 0}.
        We can also drop constraints ${\cstr{\idx\idx1}} if ${\diff_{\idx\idx1} \leq 0}.
      }
      +p{
        Clearly, sufficiently large ${\paren{\var_{\idx}, \var1_{\idx}}}'s satisfy inequations ${\cstr{\idx\idx1}}'s, but it will be better if we choose ${\paren{\var_{\idx}, \var1_{\idx}}}'s as small as possible.
        It will be much better if ${\paren{\var_{\idx}, \var1_{\idx}}}'s are balanced.
        This will be achieved by minimizing the sum of squares
        \eqn(${
          \var1_{1}^{2} + \var_{2}^{2} + \var1_{2}^{2} + \cdots + \var_{\nat - 1}^{2} + \var1_{\nat - 1}^{2} + \var_{\nat}^{2}
        });%
        Thus, vertical arrow stretching is reduced to the following constrained least-squares problem:
        \centering{
          \easytable?:[](EasyTableAlias.([l;l])){
          | minimize | ${\var1_{1}^{2} + \var_{2}^{2} + \var1_{2}^{2} + \cdots + \var1_{\nat - 1}^{2} + \var_{\nat}^{2}}
          | subject to | ${\diff_{\idx_{\idx2}\idx1_{\idx2}} \leq \var1_{\source_{\idx2}} + \var_{\target_{\idx2}} + \sum_{\source_{\idx2} < \idx' < \target_{\idx2}}\var_{\idx'} + \var1_{\idx'}} for each ${\idx2 = 1, \cdots, \nat2}
          | | ${\var_{\idx}, \var1_{\idx} \geq 0} for each ${\idx = 1, \cdots, \nat}
          |}
        }%
        where ${\cell_{\idx_{1}\idx1_{1}}, \cdots, \cell_{\idx_{\nat2}\idx1_{\nat2}}} is the list of vertical arrows and ${\cell_{\source_{\idx_{\idx2}}\idx1_{\idx2}}} and ${\cell_{\target_{\idx_{\idx2}}}\idx1_{\idx2}} are the source and the target, respectively, of ${\cell_{\idx_{\idx2}\idx1_{\idx2}}}.
      }
      +subsection{Active-set methods}<
        +p{
          Since the number of variables will not be so large (${2\paren{\nat - 1}} where ${\nat} is the number of rows of the given diagram), active-set methods will be preferable to solve this least-squares problem.
          We refer the reader to \cite[`nocedal2006numerical`]; for details of active-set methods.
        }
        +p{
          We first write the problem in a standard form.
          Let ${\nat' = 2\paren{\nat - 2}}, ${\var2_{\idx} = \var1_{\idx'}} if ${\idx = 2\idx' - 1}, and ${\var2_{\idx} = \var_{\idx' + 1}} if ${\idx = 2\idx'}.
          Let ${\paren{\mtrx'}^{\trans} = \paren{\el_{\idx2\idx}}_{\idx2, \idx}} be the ${\nat2 \times \nat'} matrix defined by ${\el_{\idx2\idx} = 1} if ${2\source_{\idx2} - 1 \leq \idx \leq 2\paren{\target_{\idx2} - 1}} and ${\el_{\idx2\idx} = 0} otherwise.
          We set ${\diff = \paren{\diff_{\idx_{\idx2}\idx1_{\idx2}}}_{1 \leq \idx2 \leq \nat2}} and ${\nat2' = \nat2 + \nat}.
          Let ${\mtrx^{\trans}} be the ${\nat2' \times \nat'}-matrix ${\matrix![
            ${| \paren{\mtrx'}^{\trans} |};
            ${| \Id |};
          ]}, and ${\el1} be the ${\nat2'}-vector ${\matrix![
            ${| \diff |};
            ${| 0 |};
          ]}.
          Then the problem is formulated as follows:
          \centering{
            \easytable?:[](EasyTableAlias.([l;l])){
            | minimize | ${\frac{1}{2}\var2^{\trans}\var2}
            | subject to | ${\mtrx^{\trans} \var2 \geq \el1}
            |}
          }
        }
        +p{
          An \emph{active-set method} is an iterative method for solving minimization problems by guessing what the \emph{active set}
          \eqn(${
            \app{\active}{\var2^{\ast}} = \setsep{\idx2 \in \set{1, \cdots, \nat2'}}{\el_{\idx2}\var2^{\ast} = \el1_{\idx2}}
          });%
          at the optimal point is.
          At each step, we are given a current point ${\var2} and a subset ${\working \subset \app{\active}{\var2}} called a \emph{working set} are given.
          The current point ${\var2} is required to be a feasible point, that is, to satisfy ${\mtrx^{\trans}\var2 \geq \el1}.
          The working set ${\working} is required to satisfy that the vectors ${\setsep{\el_{\idx2}}{\idx2 \in \working}} are linearly independent.
        }
        +p{
          We first find a direction ${\dir} to which the objective function ${\frac{1}{2}\var2^{\trans}\var2} is decreasing.
          Such a ${\dir} is found by solving the equality-constrained problem in ${\dir}
          \centering{
            \easytable?:[](EasyTableAlias.([l;l])){
            | minimize | ${\frac{1}{2}\dir^{\trans}\dir + \var2^{\trans}\dir}
            | subject to | ${\mtrx_{\working}^{\trans} \dir = 0}
            |}
          }%
          where ${\mtrx_{\working}^{\trans}} denotes the submatrix of ${\mtrx^{\trans}} consisting of the ${\idx2}-th rows for ${\idx2 \in \working}.
          It is known that one can find the optimizer for such an equality-constrained problem by solving the \emph{KKT condition}
          \eqn(${
            \matrix![
              ${| \Id | \mathprefix{-}\mtrx_{\working} |};
              ${| \mtrx_{\working}^{\trans} | 0 |};
            ]
            \matrix![
              ${| \dir |};
              ${| \lgr |};
            ] = \matrix![
              ${| \mathprefix{-}\var2 |};
              ${| 0 |};
            ]
          });%
          in ${\dir} and new variables ${\lgr = \paren{\lgr_{\idx2}}_{\idx2 \in \working}}.
          This is equivalent to solving ${\paren{\mtrx_{\working}^{\trans}\mtrx_{\working}}\lgr = \mtrx_{\working}^{\trans}\var2} first (${\mtrx_{\working}^{\trans}\mtrx_{\working}} is positive definite since ${\el_{\idx2}}'s for ${\idx2 \in \working} are linearly independent) and then obtaining ${\dir = \mtrx_{\working}\lgr - \var2}.
        }
        +p{
          Suppose that ${\dir} is ${0}.
          Then we check if ${\lgr_{\idx2} \geq 0} for all ${\idx2 \in \working}.
          If so, then we are done, and ${\var2} is the optimal solution.
          If not, choose ${\idx2 \in \working} minimizing ${\lgr_{\idx2}}, and proceed the next step with ${\var2 \bind \var2} and ${\working \bind \working \setminus \set{\idx2}}.
          Of course, the new working set ${\working \setminus \set{\idx2}} satisfies the linear-independence condition.
        }
        +p{
          Suppose that ${\dir} is not ${0}.
          In this case, we want to choose a step-length ${\step-len \in \clitvl{0}{1}} as large as possible keeping ${\var2 + \step-len \dir} feasible.
          We set
          \eqn(${
            \step-len = \min\paren{1, \min_{\idx2 \nin \working, \el_{\idx2}^{\trans}\dir < 0}\frac{\el1_{\idx2} - \el_{\idx2}^{\trans}\var2}{\el_{\idx2}^{\trans}\dir}}
          });%
          The indices ${\idx2} minimizing ${\alpha}, if exist, are called the \emph{blocking constraints}.
          We then proceed the next step with ${\var2 \bind \var2 + \step-len \dir} and ${\working \bind \working \cup \set{\idx2}} if ${\idx2} is the first blocking constraint and ${\working \bind \working} if there are no blocking constraints.
          For a blocking constraint ${\idx2}, the new working set ${\working \cup \set{\idx2}} satisfies the linear-independence condition because ${\el_{\idx2}^{\trans}\dir < 0} while ${\el_{\idx2'}^{\trans}\dir = 0} for ${\idx2' \in \working}.
        }
      >
      +subsection{Updating decomposition}<
        +p{
          The most expensive part in the active-set method is to solve the equation
          \eqn(${
            \paren{\mtrx_{\working}^{\trans}\mtrx_{\working}} \lgr = \mtrx_{\working}^{\trans}\var2
          });
          This equation can be solved using a \emph{QR decomposition} of ${\mtrx_{\working}}
          \eqn(${
            \mtrx_{\working} = \orth_{\working}\matrix![
              ${| \ut_{\working} |};
              ${| 0 |};
            ]
          });
          where ${\orth_{\working}} is an orthogonal matrix and ${\ut_{\working}} is an upper triangular matrix.
          Indeed, we have
          \eqn(${
            \mtrx_{\working}^{\trans}\mtrx_{\working} = \matrix![
              ${| \ut_{\working}^{\trans} | 0 |}
            ]\orth_{\working}^{\trans}\orth_{\working}\matrix![
              ${| \ut_{\working} |};
              ${| 0 |};
            ] = \ut_{\working}^{\trans}\ut_{\working}
          });%
          and then
          \eqn(${
            \paren{\ut_{\working}^{\trans}\ut_{\working}}\lgr = \mtrx_{\working}^{\trans}\var2
          });%
          is easily solved because ${\ut_{\working}} is an upper triangular matrix.
        }
        +p{
          To calculate a QR decomposition ${\paren{\orth_{\working}, \ut_{\working}}} efficiently, we note that the matrix ${\mtrx_{\working}} at a step only differs in one column from the previous step: one column is inserted or deleted.
          In either case, updating a QR decomposition is more efficient than recalculating.
          We refer the reader to \cite[`stewart1998matrix`]; for details.
        }
        +p{
          Let ${\working'} be the working set in the previous step and suppose that the current working set is ${\working = \working' \setminus \set{\idx2}}.
          Let ${\ut} be the matrix obtained from ${\ut_{\working'}} by removing the ${\idx2}-th column.
          We have ${\mtrx_{\working} = \orth_{\working'}\matrix![
            ${| \ut |};
            ${| 0 |};
          ]}, but ${\ut} need not be upper triangular.
          Let ${\paren{\orth, \ut_{\working}}} be a QR decomposition of ${\ut} and let ${\orth_{\working} = \orth_{\working'}\app{\diag}{\orth, \Id}}.
          Then ${\paren{\orth_{\working}, \ut_{\working}}} is a QR decomposition of ${\mtrx_{\working}}.
          For a QR decomposition of ${\ut}, we note that ${\ut} is almost upper triangular: it is of the form
          \eqn(${
            \matrix![
              ${| \ast | \cdots | \ast | \cdots | \ast | \cdots |};
              ${| \vdots | \ddots | \vdots | | \vdots  |};
              ${| 0 | \cdots | \ast | \ast | \ast |};
              ${| 0 | \cdots | 0 | \ast | \ast |};
              ${| 0 | \cdots | 0 | \ast | \ast |};
              ${| 0 | \cdots | 0 | 0 | \ast | \cdots |};
              ${| \vdots | | | | \vdots | \ddots|};
            ]
          });%
          Then we obtain a QR decomposition by repeated plain rotation.
        }
        +p{
          Suppose that the current working set is ${\working = \working' \cup \set{\idx2}}.
          We set ${\mtrx_{\working} = \matrix![
            ${| \mtrx_{\working'} | \el_{\idx2} |};
          ]}.
          Split ${\orth_{\working'} = \matrix![
            ${| \orth_{1} | \orth_{2} |};
          ]} with ${\orth_{1}} the first ${\working'} columns.
          Find a Householder transformation ${\hsh} and a scalar ${\hshr} such that ${\app{\hsh}{\orth_{2}^{\trans}\el_{\idx2}} = \hshr\unit_{1}}.
          Then ${\ut_{\working} = \matrix![
            ${| \ut_{\working'} | \orth_{1}^{\trans}\el_{\idx2} |};
            ${| 0 | \hshr |};
          ]} and ${\orth_{\working} = \orth_{\working'}\app{\diag}{\Id, \hsh}}.
          A \emph{Householder transformation} is a matrix of the form ${\hsh = \Id - \vec\vec^{\trans}} such that ${\norm{\vec}_{2} = \sqrt{2}}.
          For a given vector ${\var}, one can find a Householder transformation ${\hsh} such that ${\hsh\var = \norm{\var}_{2}\unit_{1}} or ${\hsh\var = \mathprefix{-}\norm{\var}_{2}\unit_{1}}.
        }
      >
    >
  >
  +makebibliography(bibyfi-theme)(bibs);
>
