@require: stdjareport
@import: ../ncs
@require: code
@require: math

let-inline \diagram cellssf = {\NCS.diagram(cellssf);}
let-block +diagram cellssf = '<+NCS.diagram(cellssf);>
let-math \diagram-m cellssf = ${\NCS.diagram-m!(cellssf)}

in

document (|
  title = {NCS Examples};
  author = {Taichi Uemura};
|) '<
  +p{
    A diagram is drawn by building a rectangular array of objects, horizontal arrows and virtical arrows. (Diagonal arrows are not supported.)
    \d-code(```
    \NCS.diagram
    (fun tb ->
     (let emp = tb#emp in
      let obj = tb#obj in
      let harr = tb#harr in
      let varr = tb#varr in
      [[obj {${A}}    ; harr {${f}} {}; obj {${B}}    ];
       [varr {} {${g}}; emp           ; varr {${h}} {}];
       [obj {${C}}    ; harr {} {${k}}; obj {${D}}    ]]));
```);%
    \diagram
    (fun tb ->
     (let emp = tb#emp in
      let obj = tb#obj in
      let harr = tb#harr in
      let varr = tb#varr in
      [[obj {${A}}    ; harr {${f}} {}; obj {${B}}    ];
       [varr {} {${g}}; emp           ; varr {${h}} {}];
       [obj {${C}}    ; harr {} {${k}}; obj {${D}}    ]]));%
    Arrows stretch automatically.
    \d-code(```
    \NCS.diagram
    (fun tb ->
     (let emp = tb#emp in
      let obj = tb#obj in
      let harr = tb#harr in
      let varr = tb#varr in
      [[obj {${A}}; harr {} {}; obj {${B}};
        harr {very very long label} {}; obj {${C}}];
       [varr {} {}; emp; varr {} {}; emp; varr {} {}];
       [obj {${\mathrm{Hom}\paren{D_{1}, D_{2}}}}; harr {} {};
        obj {${E}}; harr {} {${f}}; obj {${F}}]]));
```);%
    \diagram
    (fun tb ->
     (let emp = tb#emp in
      let obj = tb#obj in
      let harr = tb#harr in
      let varr = tb#varr in
      [[obj {${A}}; harr {} {}; obj {${B}};
        harr {very very long label} {}; obj {${C}}];
       [varr {} {}; emp; varr {} {}; emp; varr {} {}];
       [obj {${\mathrm{Hom}\paren{D_{1}, D_{2}}}}; harr {} {};
        obj {${E}}; harr {} {${f}}; obj {${F}}]]));%
    The source and the target of an arrow are automatically detected: the source of a horizontal arrow is the nearest object on the left\; the target of a horizontal arrow is the nearest object on the right\; the source of a vertical arrow is the nearest object above\; the target of a vertical arrow is the nearest object below. (If the source or the target of an arrow is not found, then the arrow will not be drawn.)
    \d-code(```
    \NCS.diagram(fun tb -> (
      let emp = tb#emp in
      let obj = tb#obj in
      let harr = tb#harr in
      let varr = tb#varr in
      [[obj {${A}}; harr {${a}} {}; obj {${B}}; harr {${b}} {};
        emp; emp; obj {${C}}];
       [varr {} {${c}}; emp; varr {} {${d}}; emp;
        emp; emp; varr {${e}} {}];
       [emp; emp; obj {${D}}; harr {${f}} {};
        obj {${E}}; harr {${g}} {}; obj {${F}}];
       [emp; emp; varr {} {${h}}; emp;
        varr {${i}} {}; emp; varr {${j}} {}];
       [obj {${G}}; harr {} {${k}}; obj {${H}}; harr {} {${l}};
        obj {${I}}];
       [varr {} {${m}}; emp; emp; emp;
        varr {${n}} {}];
       [obj {${J}}; harr {} {${o}}; emp; emp;
        obj {${K}}; harr {} {${p}}; obj {${L}}]]));
```);%
    \diagram(fun tb -> (
      let emp = tb#emp in
      let obj = tb#obj in
      let harr = tb#harr in
      let varr = tb#varr in
      [[obj {${A}}; harr {${a}} {}; obj {${B}}; harr {${b}} {};
        emp; emp; obj {${C}}];
       [varr {} {${c}}; emp; varr {} {${d}}; emp;
        emp; emp; varr {${e}} {}];
       [emp; emp; obj {${D}}; harr {${f}} {};
        obj {${E}}; harr {${g}} {}; obj {${F}}];
       [emp; emp; varr {} {${h}}; emp;
        varr {${i}} {}; emp; varr {${j}} {}];
       [obj {${G}}; harr {} {${k}}; obj {${H}}; harr {} {${l}};
        obj {${I}}];
       [varr {} {${m}}; emp; emp; emp;
        varr {${n}} {}];
       [obj {${J}}; harr {} {${o}}; emp; emp;
        obj {${K}}; harr {} {${p}}; obj {${L}}]]));%
    \code(`\NCS.diagram-m`); is suitable for drawing diagrams in math formulas.
    \d-code(```
    \eqn(${
      \paren{
        \NCS.diagram-m
        !(fun tb -> (
          let emp = tb#emp in
          let obj = tb#obj in
          let harr = tb#harr in
          let varr = tb#varr in
          [[obj {${A}}; harr {${f}} {}; obj {${B}};
            harr {${=}} {}; obj {${B}}];
           [varr {} {${=}};
            obj {${\mathord{\Downarrow} \epsilon}};
            varr {${g}} {}; obj {${\mathord{\Downarrow} \eta}};
            varr {${=}} {}];
           [obj {${A}}; harr {} {${=}}; obj {${A}};
            harr {} {${f}}; obj {${B}}]]
        ))
      } =
      \paren{
        \NCS.diagram-m
        !(fun tb -> (
          let emp = tb#emp in
          let obj = tb#obj in
          let harr = tb#harr in
          let varr = tb#varr in
          [[obj {${A}}; harr {${f}} {}; obj {${B}}];
           [varr {} {${=}}; obj {${=}}; varr {${=}} {}];
           [obj {${A}}; harr {} {${f}}; obj {${B}}]]))
      }
    });
```);%
    \eqn(${
      \paren{
        \diagram-m
        !(fun tb -> (
          let emp = tb#emp in
          let obj = tb#obj in
          let harr = tb#harr in
          let varr = tb#varr in
          [[obj {${A}}; harr {${f}} {}; obj {${B}};
            harr {${=}} {}; obj {${B}}];
           [varr {} {${=}};
            obj {${\mathord{\Downarrow} \epsilon}};
            varr {${g}} {}; obj {${\mathord{\Downarrow} \eta}};
            varr {${=}} {}];
           [obj {${A}}; harr {} {${=}}; obj {${A}};
            harr {} {${f}}; obj {${B}}]]
        ))
      } =
      \paren{
        \diagram-m
        !(fun tb -> (
          let emp = tb#emp in
          let obj = tb#obj in
          let harr = tb#harr in
          let varr = tb#varr in
          [[obj {${A}}; harr {${f}} {}; obj {${B}}];
           [varr {} {${=}}; obj {${=}}; varr {${=}} {}];
           [obj {${A}}; harr {} {${f}}; obj {${B}}]]))
      }
    });%
  }
>
