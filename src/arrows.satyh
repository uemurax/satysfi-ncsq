@require: pervasives
@require: base/list-ext
@require: base/option-ext
@require: base/length
@require: base/float
@require: gr
@require: arrows/arrows
@require: arrows/lib/interval
@import: ./base/point
@import: ./base/interval

module NCSqConst : sig

val line-width : float
val vee-min-width : float
val vee-ext : float
val hook-min-width : float
val hook-ext : float
val tri-min-width : float
val tri-ext : float
val pd-base : float

end = struct

let line-width = 0.042

let vee-min-width = 0.125
let vee-ext = 0.125
let hook-min-width = vee-min-width
let hook-ext = vee-ext *. 1.5
let tri-min-width = vee-min-width *. 0.7
let tri-ext = vee-ext *. 0.7

let pd-base = 0.67

end

module NCSqArrowBody : sig

% Basic body styles
val none : ArrowBody.t
val solid : ArrowBody.t
% double solid lines =====
val solid-2 : ArrowBody.t
val multi-solid : int -> ArrowBody.t
val dashed : ArrowBody.t
% double dashed lines = = =
val dashed-2 : ArrowBody.t
val multi-dashed : int -> ArrowBody.t

% Body transformers
% Adjoin |, e.g. `cross solid` looks like --+--
val cross : ArrowBody.t -> ArrowBody.t
% duplicate lines with spacing
val multiple : int -> float -> ArrowBody.t -> ArrowBody.t

end = struct

let none = ArrowBody.none
let solid = ArrowBody.solid (|width = NCSqConst.line-width|)
let multiple = ArrowBody.multiple
let spacing = NCSqConst.line-width *. 4.0
let multi-solid n = multiple n spacing solid
let solid-2 = multi-solid 2
let dashed = ArrowBody.dashed (|
  width = NCSqConst.line-width;
  dash = (|
    fill = 0.25;
    space = 0.25;
    shift = 0.;
  |);
|)
let multi-dashed n = multiple n spacing dashed
let dashed-2 = multi-dashed 2
let cross = ArrowBody.cross (|
  line-width = NCSqConst.line-width;
  size = NCSqConst.vee-min-width;
  ext = NCSqConst.vee-ext;
|)

end

module NCSqArrowHead : sig

% Basic head styles
val none : ArrowHead.t
% ->
val vee : ArrowHead.t
% ->>
val vee-2 : ArrowHead.t
val multi-vee : int -> ArrowHead.t
% -|>
val triangle : ArrowHead.t
% __\
val harpoon-l : ArrowHead.t
% ‾‾/
val harpoon-r : ArrowHead.t

% Head transformers
val shift : bool -> float -> ArrowHead.t -> ArrowHead.t
val union : ArrowHead.t -> ArrowHead.t -> ArrowHead.t
% duplicate with shift
val duplicate : bool -> int -> float -> ArrowHead.t -> ArrowHead.t

end = struct

let none = ArrowHead.none
let shift = ArrowHead.shift
let union = ArrowHead.union
let duplicate = ArrowHead.duplicate
let vee = ArrowHead.vee (|
  line-width = NCSqConst.line-width;
  size = NCSqConst.vee-min-width;
  ext = NCSqConst.vee-ext;
|)
let vee-shift = NCSqConst.vee-min-width *. 1.5
let multi-vee n = duplicate true n vee-shift vee
let vee-2 = multi-vee 2
let triangle = ArrowHead.triangle (|
  line-width = NCSqConst.line-width;
  size = NCSqConst.tri-min-width;
  ext = NCSqConst.tri-ext;
|)
let harpoon-rec = (|
  line-width = NCSqConst.line-width;
  size = NCSqConst.vee-min-width;
  ext = NCSqConst.vee-ext;
|)
let harpoon-l = ArrowHead.harpoon-l harpoon-rec
let harpoon-r = ArrowHead.harpoon-r harpoon-rec

end

module NCSqArrowTail : sig

% Basic tail styles
val none : ArrowTail.t
% >-
val vee : ArrowTail.t
% (_
val hook-l : ArrowTail.t
% ((_
val hook-l-2 : ArrowTail.t
val multi-hook-l : int -> ArrowTail.t
% (‾
val hook-r : ArrowTail.t
% ((‾
val hook-r-2 : ArrowTail.t
val multi-hook-r : int -> ArrowTail.t
% |-
val vdash : ArrowTail.t

% Tail transformers
val shift : bool -> float -> ArrowTail.t -> ArrowTail.t
val union : ArrowTail.t -> ArrowTail.t -> ArrowTail.t
% duplicate with shift
val duplicate : bool -> int -> float -> ArrowTail.t -> ArrowTail.t

end = struct

let none = ArrowTail.none
let vee = ArrowTail.vee (|
  line-width = NCSqConst.line-width;
  size = NCSqConst.vee-min-width;
  ext = NCSqConst.vee-ext;
|)
let hook-rec = (|
  line-width = NCSqConst.line-width;
  size = NCSqConst.hook-min-width;
  ext = NCSqConst.hook-ext;
|)
let hook-l = ArrowTail.hook-l hook-rec
let hook-r = ArrowTail.hook-r hook-rec
let shift = ArrowTail.shift
let union = ArrowTail.union
let duplicate = ArrowTail.duplicate
let hook-shift = NCSqConst.hook-min-width *. 1.5
let multi-hook-l n = duplicate true n hook-shift hook-l
let hook-l-2 = multi-hook-l 2
let multi-hook-r n = duplicate true n hook-shift hook-r
let hook-r-2 = multi-hook-r 2
let vdash = ArrowTail.vdash (|
  line-width = NCSqConst.line-width;
  size = NCSqConst.vee-min-width;
  ext = NCSqConst.vee-ext;
|)

end

module NCSqArrowStyle : sig

% ----->
val solid : Arrow.t
% - - ->
val dashed : Arrow.t
% =====
val equal : Arrow.t
% =====>
val solid-2 : Arrow.t
% >---->
val tail : Arrow.t
% ---->>
val two-heads : Arrow.t
% (____>
val hook-l : Arrow.t
% (‾‾‾‾>
val hook-r : Arrow.t
% ----|>
val triangle : Arrow.t
% |---->
val mapsto : Arrow.t
% -----
val line : Arrow.t

val harpoon-l : Arrow.t
val harpoon-r : Arrow.t

val of-bth : ArrowBody.t -> ArrowTail.t -> ArrowHead.t -> Arrow.t

val invert : Arrow.t -> Arrow.t

val destruct : Arrow.t -> context -> (|
  body-itv : Interval.t;
  body-length : length;
  tail-padding : length;
  head-padding : length;
  draw : Point.t -> Point.t -> graphics list
|)

end = struct

let invert = Arrow.invert
let of-bth b t h = Arrow.of-bth (|body = b; tail = t; head = h|)

let solid = of-bth NCSqArrowBody.solid NCSqArrowTail.none NCSqArrowHead.vee
let dashed = of-bth NCSqArrowBody.dashed NCSqArrowTail.none NCSqArrowHead.vee
let equal = of-bth NCSqArrowBody.solid-2 NCSqArrowTail.none NCSqArrowHead.none
let solid-2 = of-bth NCSqArrowBody.solid-2 NCSqArrowTail.none NCSqArrowHead.vee
let tail = of-bth NCSqArrowBody.solid NCSqArrowTail.vee NCSqArrowHead.vee
let two-heads = of-bth NCSqArrowBody.solid NCSqArrowTail.none NCSqArrowHead.vee-2
let hook-l = of-bth NCSqArrowBody.solid NCSqArrowTail.hook-l NCSqArrowHead.vee
let hook-r = of-bth NCSqArrowBody.solid NCSqArrowTail.hook-r NCSqArrowHead.vee
let triangle = of-bth NCSqArrowBody.solid NCSqArrowTail.none NCSqArrowHead.triangle
let mapsto = of-bth NCSqArrowBody.solid NCSqArrowTail.vdash NCSqArrowHead.vee
let harpoon-l = of-bth NCSqArrowBody.solid NCSqArrowTail.none NCSqArrowHead.harpoon-l
let harpoon-r = of-bth NCSqArrowBody.solid NCSqArrowTail.none NCSqArrowHead.harpoon-r
let line = of-bth NCSqArrowBody.solid NCSqArrowTail.none NCSqArrowHead.none

let destruct arr ctx =
let pd = get-font-size ctx *' NCSqConst.pd-base in
let a = Arrow.read arr ctx in
let m = a#metadata in
let mb = m#body in
let mh = m#head in
let mt = m#tail in
(|
  body-itv = Interval.of-interval Arrow-Interval.((left mb#mid, right mb#mid));
  body-length = mb#length;
  tail-padding = mt#length +' pd;
  head-padding = mh#length +' pd;
  draw = fun from to -> Point.(a#draw (to-point from) (to-point to));
|)

end
