@require: base/list-ext
@require: base/fn
@require: base/float
@import: ./base/zipper
@import: ./base/point
@import: ./base/interval
@import: ./base/matrix
@import: ./base/real-matrix
@import: ./base/qp
@import: ./base/rect
@import: ./base/graphics

module NCSqConstraints : sig

type t

val nil : (|
  num-rows : int;
  num-columns : int;
|) -> t
val union : t -> t -> t

val solve : t -> (|
  horiz : Interval.t list;
  vert : Interval.t list;
|)

val of-interval-h : Interval.t -> 'a MatrixZipper.t -> t
val of-interval-v : Interval.t -> 'a MatrixZipper.t -> t
val of-rect : Rect.t -> 'a MatrixZipper.t -> t
val of-region-h : int -> int -> length -> 'a MatrixZipper.t -> t
val of-region-v : int -> int -> length -> 'a MatrixZipper.t -> t
val of-region : (|
  horiz : int;
  vert : int;
|) -> (|
  horiz : int;
  vert : int;
|) -> length -> length -> 'a MatrixZipper.t -> t

end = struct

type constr = (float * float) list * length
type interval = Interval.t
type t = (|
  horiz : constr list * interval list;
  vert : constr list * interval list;
|)

let nil-1 n = ([], List.repeat n Interval.zero)
let nil s = (|
  horiz = nil-1 s#num-columns;
  vert = nil-1 s#num-rows;
|)

let union-1 (c-l1, i-l1) (c-l2, i-l2) =
List.((append c-l1 c-l2, map (fun (i1, i2) -> Interval.union i1 i2) (zip i-l1 i-l2)))

let union c1 c2 = (|
  horiz = union-1 c1#horiz c2#horiz;
  vert = union-1 c1#vert c2#vert;
|)

let of-interval itv lz =
let a-lz = ListZipper.map (fun _ -> (0.0, 0.0)) lz in
let i-l = ListZipper.(
  lz
  |> map (fun _ -> Interval.zero)
  |> replace itv
  |> to-list
) in
let a-l1 = ListZipper.(
  a-lz
  |> replace (Float.neg 1.0, 0.0)
  |> to-list
) in
let b1 = Length.neg (Interval.left itv) in
let a-l2 = ListZipper.(
  a-lz
  |> replace (0.0, 1.0)
  |> to-list
) in
let b2 = Interval.right itv in
([(a-l1, b1); (a-l2, b2)], i-l)

let of-interval-h itv mz =
let h-lz = MatrixZipper.cursor-row mz in
let v-lz = MatrixZipper.cursor-column mz in
(|
  horiz = of-interval itv h-lz;
  vert = nil-1 (ListZipper.length v-lz);
|)

let of-interval-v itv mz =
let h-lz = MatrixZipper.cursor-row mz in
let v-lz = MatrixZipper.cursor-column mz in
(|
  horiz = nil-1 (ListZipper.length h-lz);
  vert = of-interval itv v-lz;
|)

let of-rect rc mz =
let ih = Rect.interval-h rc in
let iv = Rect.interval-v rc in
union (of-interval-h ih mz) (of-interval-v iv mz)

let-rec replace-n x n lz =
if n <= 0 then Option.some lz
else (
  lz
  |> ListZipper.replace x
  |> ListZipper.go-forward
  |> Option.and-then (replace-n x (n - 1))
)

let of-region-1 from to width lz =
let fallback _ = nil-1 (ListZipper.length lz) in
let f-lz = ListZipper.map (fun _ -> (0.0, 0.0)) lz in
ListZipper.move from f-lz
|> Option.map-or-else fallback (fun src-lz -> (
  src-lz
  |> ListZipper.replace (0.0, 1.0)
  |> ListZipper.go-forward
  |> Option.map-or-else fallback (fun src-lz1 -> (
    src-lz1
    |> replace-n (Float.neg 1.0, 1.0) ((Int.neg from - 1) + to)
    |> Option.map-or-else fallback (fun tgt-lz -> (
      let a-l = ListZipper.(tgt-lz |> replace (Float.neg 1.0, 0.0) |> to-list) in
      let b = width in
      let i-l = ListZipper.(
        lz
        |> map (fun _ -> Interval.zero)
        |> replace (Interval.of-interval (0pt, width))
        |> to-list
      ) in
      ([(a-l, b)], i-l)
    ))
  ))
))

let of-region-h from to width mz =
let h-lz = MatrixZipper.cursor-row mz in
let v-lz = MatrixZipper.cursor-column mz in
(|
  horiz = of-region-1 from to width h-lz;
  vert = nil-1 (ListZipper.length v-lz);
|)

let of-region-v from to height mz =
let h-lz = MatrixZipper.cursor-row mz in
let v-lz = MatrixZipper.cursor-column mz in
(|
  horiz = nil-1 (ListZipper.length h-lz);
  vert = of-region-1 from to height v-lz;
|)

let of-region from to width height mz =
union
(of-region-h from#horiz to#horiz width mz)
(of-region-v from#vert to#vert height mz)

let unpair ls = List.(concat (map (fun (x, y) -> [x; y]) ls))

let-rec pair ls =
match ls with
| x :: y :: ls-1 -> (x, y) :: pair ls-1
| _ -> []

let l2f x = x /' 1pt
let f2l x = 1pt *' x

let solve-1 (c-l, i-l) =
let v0-l = unpair (List.map Interval.to-interval i-l) in
let n = List.length v0-l in
let v0 = RealVector.of-list (List.map l2f v0-l) in
let (a-l1, b-l1) = List.unzip c-l in
let a-l2 = List.map unpair a-l1 in
let a = RealMatrix.of-list-list n a-l2 in
let u = RealVector.of-list (List.map l2f b-l1) in
let v = QP.solve a u v0 in
List.map Interval.of-interval (pair (List.map f2l (RealVector.to-list v)))

let solve c = (|
  horiz = solve-1 c#horiz;
  vert = solve-1 c#vert;
|)

end

module NCSqCellRaw : sig

type 'a t

val data : 'a t -> 'a
val core : ('a t) MatrixZipper.t -> (|
  constraints : NCSqConstraints.t;
  draw : ('a t * Point.t) MatrixZipper.t -> graphics list;
|)
val natural-bbox : 'a t -> Rect.t

val empty : 'a -> 'a t
val const : 'a -> Rect.t -> graphics list -> 'a t
val edge : (|
  data : 'a;
  is-source : 'a t -> bool;
  is-target : 'a t -> bool;
  direction : (|
    horiz : int;
    vert : int;
  |);
  bbox : Rect.t;
  draw : Point.t -> Point.t -> graphics list;
|) -> 'a t

end = struct

type point = Point.t
type 'a mzipper = 'a MatrixZipper.t
type constr = NCSqConstraints.t

type 'a t =
| Cell of (|
  data : 'a;
  core : ('a t) mzipper -> (|
    constraints : constr;
    draw : ('a t * point) mzipper -> graphics list;
  |);
|)

let data (Cell c) = c#data

let core c-mz =
match MatrixZipper.cursor c-mz with
| Cell c -> c#core c-mz

let natural-bbox c =
let k = core (MatrixZipper.singleton c) in
let cstr = k#constraints in
let res = NCSqConstraints.solve cstr in
let ih = Option.unwrap (List.head res#horiz) in
let iv = Option.unwrap (List.head res#vert) in
Rect.of-intervals (|
  horiz = ih;
  vert = iv;
|)

let empty x = Cell (|
  data = x;
  core = fun c-mz -> (|
    constraints = NCSqConstraints.nil (MatrixZipper.size c-mz);
    draw = fun _ -> [];
  |);
|)

let const x rc gr-l = Cell (|
  data = x;
  core = fun c-mz -> (|
    constraints = NCSqConstraints.of-rect rc c-mz;
    draw = fun cp-mz -> (
      let (_, pt) = MatrixZipper.cursor cp-mz in
      GraphicsList.shift pt gr-l
    );
  |);
|)

let edge rec =
let dir = rec#direction in
let ndir = (|
  horiz = Int.neg dir#horiz;
  vert = Int.neg dir#vert;
|) in
Cell (|
  data = rec#data;
  core = fun c-mz -> (
    let is-source = rec#is-source in
    let is-target = rec#is-target in
    let fallback _ = (|
      constraints = NCSqConstraints.nil (MatrixZipper.size c-mz);
      draw = fun _ -> []
    |) in
    MatrixZipper.search is-target dir c-mz
    |> Option.map-or-else fallback (fun (tgt-mz, dirt) -> (
      MatrixZipper.search is-source ndir c-mz
      |> Option.map-or-else fallback (fun (src-mz, dirs) -> (
        let rcs = natural-bbox (MatrixZipper.cursor src-mz) in
        let rct = natural-bbox (MatrixZipper.cursor tgt-mz) in
        (|
          constraints = (
            let ch = (
              if dirs#horiz < dirt#horiz then (
                NCSqConstraints.of-region-h dirs#horiz dirt#horiz
                Rect.(width rec#bbox +' (right rcs -' left rct))
                c-mz
              ) else if dirs#horiz == dirt#horiz then (
                NCSqConstraints.of-interval-h Rect.(interval-h rec#bbox) c-mz
              ) else (
                NCSqConstraints.of-region-h dirt#horiz dirs#horiz
                Rect.(width rec#bbox +' (right rct -' left rcs))
                c-mz
              )
            ) in
            let cv = (
              if dirs#vert < dirt#vert then (
                NCSqConstraints.of-region-v dirs#vert dirt#vert
                Rect.(height rec#bbox +' (top rcs -' bottom rct))
                c-mz
              ) else if dirs#vert == dirt#vert then (
                NCSqConstraints.of-interval-v Rect.(interval-v rec#bbox) c-mz
              ) else (
                NCSqConstraints.of-region-v dirt#vert dirs#vert
                Rect.(height rec#bbox +' (top rct -' bottom rcs))
                c-mz
              )
            ) in
            NCSqConstraints.union ch cv
          );
          draw = fun cp-mz -> (
            let src-mz = Option.unwrap (MatrixZipper.move dirs cp-mz) in
            let tgt-mz = Option.unwrap (MatrixZipper.move dirt cp-mz) in
            let (src, sp) = MatrixZipper.cursor src-mz in
            let (tgt, tp) = MatrixZipper.cursor tgt-mz in
            Point.(arg (tp - sp))
            |> Option.map-or [] (fun a -> (
              let from = Point.(sp + Rect.ray-intersection a rcs) in
              let to = Point.(tp + Rect.ray-intersection (a +. Float.pi) rct) in
              rec#draw from to
            ))
          );
        |)
      ))
    ))
  );
|)

end

module NCSqBackend : sig

val draw-cellss-auto : ('a NCSqCellRaw.t) Matrix.t -> graphics list

end = struct

let cellss-core c-mz =
let k1 = (
  MatrixZipper.fold (fun acc c-mz -> (
    let k = NCSqCellRaw.core c-mz in
    let cstr1 = NCSqConstraints.union acc#constraints k#constraints in
    let draw-l1 = k#draw :: acc#draw-l in
    (|
      constraints = cstr1;
      draw-l = draw-l1;
    |)
  )) (|
    constraints = NCSqConstraints.nil (MatrixZipper.size c-mz);
    draw-l = [];
  |) c-mz
) in
(|
  k1 with
  draw-l = List.reverse k1#draw-l;
|)

let cellss-draw draw-l cp-mz =
let a = (
  MatrixZipper.fold (fun acc cp-mz -> (
    let (draw, draw-l1) = Option.unwrap (List.uncons acc#draw-l) in
    (|
      gr-l = List.append acc#gr-l (draw cp-mz);
      draw-l = draw-l1;
    |)
  )) (|
    draw-l = draw-l;
    gr-l = [];
  |) cp-mz
) in
a#gr-l

let make-grid itv-l =
let (x-l, _) = (
  List.fold-left (fun (x-l, x) itv -> (
    (let x1 = x -' Interval.left itv in
     (x1 :: x-l, x1 +' Interval.right itv))
  )) ([], 0pt) itv-l
) in
List.reverse x-l

let draw-cellss-auto c-mx =
let fallback = [] in
MatrixZipper.of-matrix c-mx
|> Option.map-or fallback (fun c-mz -> (
  let k = cellss-core c-mz in
  let cstr = k#constraints in
  let a = NCSqConstraints.solve cstr in
  let hgrid = make-grid a#horiz in
  let vgrid = make-grid a#vert in
  let grid = Matrix.(map Point.of-point (outer-product hgrid vgrid)) in
  let cp-mx = Matrix.zip c-mx grid in
  let cp-mz = Option.unwrap (MatrixZipper.of-matrix cp-mx) in
  cellss-draw k#draw-l cp-mz
))

end
