module Paddings : sig

type t

val of-paddings :
length *                        % left
length *                        % right
length *                        % top
length ->                       % bottom
t

val relative : float * float * float * float -> length -> t
val to-paddings : t -> length * length * length * length

val horizontal : t ->
length *                        % left
length                          % right

val vertical : t ->
length *                        % bottom
length                          % top

end = struct

type t = length * length * length * length

let of-paddings pds = pds
let to-paddings pds = pds

let relative (l, r, t, b) p = of-paddings (p *' l, p *' r, p *' t, p *' b)

let horizontal (l, r, _, _) = (l, r)
let vertical (_, _, t, b) = (b, t)

end
