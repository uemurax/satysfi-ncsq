@import: ./point
@import: ./paddings
@import: ./interval

module Rect : sig

type t

val of-rect :
(
  length *                      % left
  length                        % bottom
) * (
  length *                      % right
  length                        % top
) -> t

val to-rect : t -> (length * length) * (length * length)

val zero : t
val union : t -> t -> t
val pad : Paddings.t -> t -> t
val interval-h : t -> Interval.t
val interval-v : t -> Interval.t

end = struct

type point = Point.t

type t = point * point

let of-rect (p0, p1) = Point.((of-point p0, of-point p1))
let to-rect (p0, p1) = Point.((to-point p0, to-point p1))

let zero = Point.((zero, zero))
let union (p0, p1) (q0, q1) = Point.((min p0 q0, max p1 q1))

let pad pds rc =
let (l, r, t, b) = Paddings.to-paddings pds in
let ((x0, y0), (x1, y1)) = to-rect rc in
of-rect ((x0 -' l, y0 -' b), (x1 +' r, y1 +' t))

let interval-h (p0, p1) = Interval.of-interval (Point.x p0, Point.x p1)
let interval-v (p0, p1) = Interval.of-interval (Point.y p0, Point.y p1)

end
