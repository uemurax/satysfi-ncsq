@import: ./point
@import: ./paddings
@import: ./interval

module Rect : sig

type t

val of-rect : (length * length) * (length * length) -> t
val of-points : Point.t -> Point.t -> t
val to-rect : t -> (length * length) * (length * length)
val of-intervals : (|
  horiz : Interval.t;
  vert : Interval.t
|) -> t

val zero : t
val union : t -> t -> t
val pad : Paddings.t -> t -> t
val shift : Point.t -> t -> t

val left : t -> length
val bottom : t -> length
val right : t -> length
val top : t -> length
val interval-h : t -> Interval.t
val interval-v : t -> Interval.t
val center : t -> Point.t
val width : t -> length
val height : t -> length

% Intersection of a rectangle and a ray from the center of the rectangle
val ray-intersection : float -> t -> Point.t

end = struct

type point = Point.t

type t = point * point

let of-rect ((x0, y0), (x1, y1)) =
Point.(Length.((of-point (min x0 x1, min y0 y1), of-point (max x0 x1, max y0 y1))))
let of-points p0 p1 = of-rect Point.((to-point p0, to-point p1))
let to-rect (p0, p1) = Point.((to-point p0, to-point p1))

let of-intervals rec =
let (l, r) = Interval.to-interval rec#horiz in
let (b, t) = Interval.to-interval rec#vert in
of-rect ((l, b), (r, t))

let zero = Point.((zero, zero))
let union (p0, p1) (q0, q1) = Point.((min p0 q0, max p1 q1))
let shift pt (p0, p1) = Point.((p0 + pt, p1 + pt))

let pad pds rc =
let (l, r, t, b) = Paddings.to-paddings pds in
let ((x0, y0), (x1, y1)) = to-rect rc in
of-rect ((x0 -' l, y0 -' b), (x1 +' r, y1 +' t))

let left (p0, _) = Point.x p0
let bottom (p0, _) = Point.y p0
let right (_, p1) = Point.x p1
let top (_, p1) = Point.y p1
let interval-h (p0, p1) = Interval.of-interval (Point.x p0, Point.x p1)
let interval-v (p0, p1) = Interval.of-interval (Point.y p0, Point.y p1)
let center rc = Point.of-point Interval.((center (interval-h rc), center (interval-v rc)))
let width rc = Interval.width (interval-h rc)
let height rc = Interval.width (interval-v rc)

let ray-intersection a rc =
let ((l, b), (r, t)) = to-rect rc in
let cs = Float.cos a in
let pt = (
  if Float.(abs cs < 0.0000000001) then (
    if Float.(sin a > 0.0) then (0pt, t)
    else (0pt, b)
  ) else (
    let tn = Float.tan a in
    if Float.(cs > 0.0) then (
      let rtn = r *' tn in
      if Length.(rtn < b) then (r *' cs, b)
      else if Length.(rtn < t) then (r, rtn)
      else (r *' cs, t)
    ) else (
      let ltn = l *' tn in
      if Length.(ltn < b) then (Length.neg l *' cs, b)
      else if Length.(ltn < t) then (l, ltn)
      else (Length.neg l *' cs, t)
    )
  )
) in
Point.(of-point pt)

end
