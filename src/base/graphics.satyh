@import: ./rect
@import: ./point

module GraphicsList : sig

val bbox : graphics list -> Rect.t
val shift : Point.t -> graphics list -> graphics list

end = struct

let bbox gr-l =
match gr-l with
| [] -> Rect.zero
| gr :: gr-l1 -> List.(
  gr-l1
  |> map get-graphics-bbox
  |> map Rect.of-rect
  |> fold-right Rect.union Rect.(of-rect (get-graphics-bbox gr))
)

let shift pt = List.map (shift-graphics (Point.to-point pt))

end
