@require: zrbase/zmtdoc0
@require: zrbase/zlog0
@require: assert-eq/assert-eq
@require: base/list-ext
@require: base/float
@import: ../src/matrix

open AssertEq
open ZLog0

% Upper triangular matrix
% | 1 2 4 |
% |   3 5 |
% |     6 |
let ut0 = List.fold-left (
  fun ut (vs, v) ->  UpperTriangle.append-column (RealVector.of-list vs) v ut
) UpperTriangle.nil [
  ([], 1.0);
  ([2.0], 3.0);
  ([4.0; 5.0], 6.0);
]

% Lower triangular matrix
% | 1     |
% | 2 3   |
% | 4 5 6 |
let lt0 = List.fold-right (
  fun (v, vs) lt -> LowerTriangle.prepend-column v (RealVector.of-list vs) lt
) LowerTriangle.nil [
  (1.0, [2.0; 4.0]);
  (3.0, [5.0]);
  (6.0, []);
]

let _ = assert-eq ?:(`transpose`) LowerTriangle.show (UpperTriangle.transpose ut0) lt0

let v0 = RealVector.of-list [1.0; 2.0; 3.0]
% ut0 v0
let ut0v0 = RealVector.of-list [17.0; 21.0; 18.0]
% lt0 v0
let lt0v0 = RealVector.of-list [1.0; 8.0; 32.0]

let _ = assert-eq ?:(`upper-app`) RealVector.show (UpperTriangle.app ut0 v0) ut0v0
let _ = assert-eq ?:(`upper-app-inv`) RealVector.show UpperTriangle.(app ut0 (app-inv ut0 v0)) v0
let _ = assert-eq ?:(`uuper-inv-app`) RealVector.show UpperTriangle.(app-inv ut0 (app ut0 v0)) v0
let _ = assert-eq ?:(`lower-app`) RealVector.show (LowerTriangle.app lt0 v0) lt0v0
let _ = assert-eq ?:(`lower-app-inv`) RealVector.show LowerTriangle.(app lt0 (app-inv lt0 v0)) v0
let _ = assert-eq ?:(`lower-inv-app`) RealVector.show LowerTriangle.(app-inv lt0 (app lt0 v0)) v0

let nv0 = Float.sqrt 14.0

let _ = assert-eq ?:(`norm`) show-float (RealVector.norm v0) nv0

let (h0, r) = Householder.generate v0

let _ = assert-eq ?:(`householder-norm`) show-float (RealVector.norm (Householder.to-vector h0)) (Float.sqrt 2.0)

% let _ = assert-eq ?:(`householder-app`) RealVector.show (Householder.app h0 v0) (RealVector.of-list [r; 0.0; 0.0])
%% ! [Error during Evaluation]
%% test householder-app ...
%%  left: [-3.74165738677; -4.4408920985e-16; -8.881784197e-16]
%% right: [-3.74165738677; 0.; 0.]

let bs = RealVector.basis 3

let _ = assert-eq ?:(`basis`) RealMatrix.show (RealMatrix.of-list 3 bs) (
  RealMatrix.of-list-list 3 [
    [1.0; 0.0; 0.0];
    [0.0; 1.0; 0.0];
    [0.0; 0.0; 1.0];
  ])

let qr0 = QR.(
  nil 3
  |> append-column (RealVector.of-list [1.0; 2.0; 3.0])
  |> append-column (RealVector.of-list [2.0; 1.0; 0.0])
)
let q0 = QR.q qr0

% let _ = assert-eq ?:(`qr-orth-1`) RealMatrix.show RealMatrix.(comp (transpose q0) q0) RealMatrix.(id 3)
%% ! [Error during Evaluation]
%% test qr-orth-1 ...
%%  left: [[1.; 2.77555756156e-17; 2.77555756156e-17]; [2.77555756156e-17; 1.; -1.66533453694e-16]; [2.77555756156e-17; -1.66533453694e-16; 1.]]
%% right: [[1.; 0.; 0.]; [0.; 1.; 0.]; [0.; 0.; 1.]]
% let _ = assert-eq ?:(`qr-orth-2`) RealMatrix.show RealMatrix.(comp q0 (transpose q0)) RealMatrix.(id 3)
%% ! [Error during Evaluation]
%% test qr-orth-2 ...
%%  left: [[1.; 1.38777878078e-16; -5.55111512313e-17]; [1.38777878078e-16; 1.; -5.55111512313e-17]; [-5.55111512313e-17; -5.55111512313e-17; 1.]]
%% right: [[1.; 0.; 0.]; [0.; 1.; 0.]; [0.; 0.; 1.]]

% let _ = assert-eq ?:(`qr-comp`) RealMatrix.show QR.(compose qr0) RealMatrix.(of-list-list 3 [
%   [1.0; 2.0; 3.0];
%   [2.0; 1.0; 0.0];
% ])
%% ! [Error during Evaluation]
%% test qr-comp ...
%%  left: [[1.; 2.; 3.]; [2.; 1.; -1.11022302463e-16]]
%% right: [[1.; 2.; 3.]; [2.; 1.; 0.]]

let qr1 = QR.remove-column 0 qr0
let q1 = QR.q qr1

% let _ = assert-eq ?:(`qr-orth-3`) RealMatrix.show RealMatrix.(comp (transpose q1) q1) RealMatrix.(id 3)
%% ! [Error during Evaluation]
%% test qr-orth-3 ...
%%  left: [[1.; 0.; 9.71445146547e-17]; [0.; 1.; -2.22044604925e-16]; [9.71445146547e-17; -2.22044604925e-16; 1.]]
%% right: [[1.; 0.; 0.]; [0.; 1.; 0.]; [0.; 0.; 1.]]

% let _ = assert-eq ?:(`qr-comp-1`) RealMatrix.show QR.(compose qr1) RealMatrix.(of-list-list 3 [
%   [2.0; 1.0; 0.0];
% ])
%% ! [Error during Evaluation]
%% test qr-comp-1 ...
%%  left: [[2.; 1.; -1.24126707662e-16]]
%% right: [[2.; 1.; 0.]]

in

document()
