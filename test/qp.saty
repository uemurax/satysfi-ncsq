@require: zrbase/zmtdoc0
@require: zrbase/zlog0
@require: assert-eq/assert-eq
@require: base/string
@import: ../src/qp

open AssertEq
open ZLog0

let c0 = RealVector.of-list [2.0; 1.0; 3.0]
let a0 = RealMatrix.of-list-list 3 [
  [1.0; 2.0; 1.0];
  [3.0; 0.0; 1.0];
]
let qr0 = QR.decompose a0
let r0 = QR.r qr0

let (x0, lgr0) = EQQP.solve c0 a0 r0

let _ = assert-eq ?:(`eqqp KTT`) RealVector.show RealVector.(x0 - RealMatrix.app a0 lgr0) RealVector.(neg c0)
% let _ = assert-eq ?:(`eqqp constraint`) RealVector.show RealMatrix.(app-t a0 x0) RealVector.(zero 2)
%% ! [Error during Evaluation]
%% test eqqp constraint ...
%%  left: [1.33226762955e-15; -1.33226762955e-15]
%% right: [0.; 0.]

let a0 = RealMatrix.of-list-list 3 [
  [2.0; 1.0; 3.0];
  [0.0; 2.0; 1.0];
  [3.0; 0.0; 2.0];
  [0.0; 1.0; 0.0];
]
let b0 = RealVector.of-list [
  1.0;
  0.0;
  1.0;
  0.0;
]
let x0 = RealVector.of-list [3.0; 3.0; 3.0]

let _ = assert-eq ?:(`x0 feasible`) String.of-bool QP.(feasible a0 b0 x0) true

let _ = info (`Solving QP with a = ` ^ RealMatrix.show a0 ^ ` and b = ` ^ RealVector.show b0 ^ ` from x0 = ` ^ RealVector.show x0)
let xx0 = QP.solve a0 b0 x0
let _ = assert-eq ?:(`xx0 feasible`) String.of-bool QP.(feasible a0 b0 xx0) true
let _ = info (`Solved: x = ` ^ RealVector.show xx0)

let x1 = RealVector.of-list [0.0 -. 1.0; 0.0; 6.0]
let _ = assert-eq ?:(`x1 feasible`) String.of-bool QP.(feasible a0 b0 x1) true
let _ = info (`Solving QP with a = ` ^ RealMatrix.show a0 ^ ` and b = ` ^ RealVector.show b0 ^ ` from x1 = ` ^ RealVector.show x1)
let xx1 = QP.solve a0 b0 x1
let _ = assert-eq ?:(`xx1 feasible`) String.of-bool QP.(feasible a0 b0 xx1) true
let _ = info (`Solved: x = ` ^ RealVector.show xx1)
let _ = assert-eq ?:(`xx0 == xx1`) RealVector.show xx0 xx1

in

document ()
